// app.js - Configuration principale de l'application
const express = require('express');
const cors = require('cors');
const dotenv = require('dotenv');
dotenv.config();

const { sequelize } = require('./models');
const routes = require('./routes'); // ‚Üê ‚úÖ On importe le routeur central

const app = express();

// ‚úÖ D√©finition des origines autoris√©es
const allowedOrigins = [
  'https://vilo-assist-pro-jet.vercel.app',
  'http://localhost:8080'
];

// ‚úÖ Middleware CORS personnalis√©
app.use(cors({
  origin: (origin, callback) => {
    if (!origin || allowedOrigins.includes(origin)) {
      callback(null, true);
    } else {
      callback(new Error(`CORS policy: origin ${origin} not allowed`));
    }
  },
  credentials: true
}));

app.use(express.json({ limit: '10mb' }));
app.use(express.urlencoded({ extended: true, limit: '10mb' }));

// Middleware de log en d√©veloppement
if (process.env.NODE_ENV === 'development') {
  app.use((req, res, next) => {
    console.log(`${req.method} ${req.originalUrl} - ${new Date().toISOString()}`);
    next();
  });
}

// ‚úÖ Point d‚Äôentr√©e des routes (centralis√©)
app.use('/api', routes);

// ‚úÖ Middleware de gestion d‚Äôerreurs
app.use((err, req, res, next) => {
  console.error('‚ùå Erreur non g√©r√©e :', err.message);
  res.status(err.status || 500).json({
    success: false,
    message: err.message || 'Erreur interne du serveur',
    error: process.env.NODE_ENV === 'development' ? err.stack : undefined
  });
});

// ‚úÖ Route 404 (pour les routes non trouv√©es)
app.use('*', (req, res) => {
  res.status(404).json({
    success: false,
    message: `Route ${req.method} ${req.originalUrl} non trouv√©e`
  });
});

// ‚úÖ D√©marrage du serveur
const PORT = process.env.PORT || 3001;

async function startServer() {
  try {
    await sequelize.authenticate();
    console.log('‚úÖ Connexion √† la base de donn√©es √©tablie avec succ√®s.');

    if (process.env.NODE_ENV === 'development') {
      await sequelize.sync({ alter: false });
      console.log('‚úÖ Mod√®les synchronis√©s avec la base de donn√©es.');
    }

    app.listen(PORT, () => {
      console.log(`üöÄ Serveur d√©marr√© sur le port ${PORT}`);
      console.log(`üìù API: http://localhost:${PORT}/api`);
      console.log(`‚ù§Ô∏è  Health check: http://localhost:${PORT}/api/health`);
    });

  } catch (error) {
    console.error('‚ùå Impossible de se connecter √† la base de donn√©es:', error);
    process.exit(1);
  }
}

// ‚úÖ Gestion propre des arr√™ts
process.on('SIGINT', async () => {
  console.log('\n‚èπÔ∏è  Arr√™t du serveur...');
  await sequelize.close();
  console.log('‚úÖ Connexion √† la base de donn√©es ferm√©e.');
  process.exit(0);
});

process.on('SIGTERM', async () => {
  console.log('\n‚èπÔ∏è  Arr√™t du serveur...');
  await sequelize.close();
  console.log('‚úÖ Connexion √† la base de donn√©es ferm√©e.');
  process.exit(0);
});

startServer();

module.exports = app;
